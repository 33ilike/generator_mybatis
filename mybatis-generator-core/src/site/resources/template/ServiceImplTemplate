package ${templatePackage};

import java.util.List;
import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import ${modelPackage};
import ${mapperPackage};
<#if columnsHasBLOB == true>
import ${modelPackage}WithBLOBs;
</#if>


/**
 * @author
 * @version 0.0.1
 * @date ${generatedDate}
 * @time ${generatedTime}
 * @function 功能:
 * @describe 版本描述:
 * @modifyLog 修改日志:
 *
 * @mbg.generated do_not_delete_during_merge
 */
@Service
public class ${className} {
    @Resource
    private ${mapperType} ${mapperName};

    /**
     * 保存 ${modelClazz}
     * @param modelName 对象
     *
     * @mbg.generated
     */
<#if columnsHasBLOB == true>
    public void save(${modelClazz}WithBLOBs modelName){
<#else>
    public void save(${modelClazz} modelName){
</#if>
        this.${mapperName}.insertSelective(modelName);
    }

    /**
     * 根据主键删除
     * @param primaryKey 主键
     *
     * @mbg.generated
     */
    public void deleteByPrimaryKey(Integer primaryKey){
        this.${mapperName}.deleteByPrimaryKey(primaryKey);
    }

    /**
     * 通过主键获取对象
     * @param primaryKey 主键
     * @return ${modelClazz}
     *
     * @mbg.generated
     */
    public ${modelClazz} getByPrimaryKey(Integer primaryKey){
        return this.${mapperName}.selectByPrimaryKey(primaryKey);
    }

    /**
     * 通过主键获取没有被删除的对象
     * @param primaryKey 主键
     * @return ${modelClazz}
     *
     * @mbg.generated
     */
    public ${modelClazz} getNotDeleteByPrimaryKey(Integer primaryKey){
        return this.${mapperName}.selectNotDeleteByPrimaryKey(primaryKey);
    }

    /**
     * 查询所有
     * @return List<${modelClazz}>
     *
     * @mbg.generated
     */
    public List<${modelClazz}> findAll(){
        return this.${mapperName}.selectAll();
    }

    /**
     * 查询所有没有被删除的对象
     * @return List<${modelClazz}>
     *
     * @mbg.generated
     */
    public List<${modelClazz}> findNotDeleteAll(){
        return this.${mapperName}.selectNotDeleteAll();
    }
}

package ${templatePackage};

import com.github.pagehelper.PageInfo;
import com.xmigc.dao.ButtonMapper;
import com.xmigc.dto.PageResult;
import com.xmigc.dto.Result;
import com.xmigc.entity.Button;
import com.xmigc.entity.ButtonExample;
import com.xmigc.service.ButtonService;
import io.jsonwebtoken.lang.Collections;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class ButtonServiceImpl extends BaseService implements ButtonService {

    @Autowired
    private ButtonMapper buttonMapper;

    @Override
    public Result createButton(Button button) {
        int i = buttonMapper.insert(button);
        if (i > 0) {
            return Result.success("删除成功");
        } else {
            return Result.failed("删除失败");
        }
    }


    @Override
    public Result deleteButton(String ids) {
        String[] p = ids.split(",");
        List<Long> list = Collections.arrayToList(p);
        ButtonExample buttonExample = new ButtonExample();
        ButtonExample.Criteria criteria = buttonExample.createCriteria();
        criteria.andIdIn(list);
        int i = buttonMapper.deleteByExample(buttonExample);
        if (i > 0) {
            return Result.success("删除成功");
        } else {
            return Result.failed("删除失败");
        }
    }

    @Override
    @Transactional
    public Result updateButton(Button button) {
        int i = buttonMapper.updateByPrimaryKey(button);
        if (i > 0) {
            return Result.success("修改成功");
        } else {
            return Result.failed("修改失败");
        }
    }

    @Override
    public PageResult queryButtons(Map<String, String> parameterMap) {
        // 通过反射设置查询条件，大致这样，有待完善
        ButtonExample buttonExample = super.getCriteria("com.xmigc.entity.Button", "com.xmigc.entity.ButtonExample$Criteria", parameterMap);
        // 查询
        List buttons = buttonMapper.selectByExample(buttonExample);
        // 分页信息
        PageInfo<Button> buttonPageInfo = new PageInfo<>(buttons);
        //封装分页信息
        Map<String, Object> pagination = new HashMap<>();
        pagination.put("total", buttonPageInfo.getTotal());
        pagination.put("pageSize", buttonPageInfo.getPageSize());
        pagination.put("current", buttonPageInfo.getPageNum());
        // 返回结果
        return new PageResult(0, "查询成功", buttons, pagination);
    }

}
